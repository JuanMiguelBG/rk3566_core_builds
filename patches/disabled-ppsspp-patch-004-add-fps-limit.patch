diff --git a/Core/Config.cpp b/Core/Config.cpp
index 4a687683d..0239cd48b 100644
--- a/Core/Config.cpp
+++ b/Core/Config.cpp
@@ -511,6 +511,7 @@ static const ConfigSetting graphicsSettings[] = {
 #if defined(USING_WIN_UI)
 	ConfigSetting("RestartRequired", &g_Config.bRestartRequired, false, CfgFlag::DONT_SAVE),
 #endif
+    ReportedConfigSetting("ForceMaxEmulatedFPS", &g_Config.iForceMaxEmulatedFPS, 0, true, true),
 
 	// Most low-performance (and many high performance) mobile GPUs do not support aniso anyway so defaulting to 4 is fine.
 	ConfigSetting("AnisotropyLevel", &g_Config.iAnisotropyLevel, 4, CfgFlag::PER_GAME),
diff --git a/Core/Config.h b/Core/Config.h
index e871c14eb..3373cd32e 100644
--- a/Core/Config.h
+++ b/Core/Config.h
@@ -168,6 +168,7 @@ struct Config {
 
 	int iFrameSkip;
 	int iFrameSkipType;
+	int iForceMaxFPS;
 	int iFastForwardMode; // See FastForwardMode in ConfigValues.h.
 	bool bAutoFrameSkip;
 
@@ -204,6 +205,7 @@ struct Config {
 	bool bTexHardwareScaling;
 	int iFpsLimit1;
 	int iFpsLimit2;
+	int iForceMaxEmulatedFPS;
 	int iAnalogFpsLimit;
 	int iMaxRecent;
 	int iCurrentStateSlot;
diff --git a/Core/HLE/sceDisplay.cpp b/Core/HLE/sceDisplay.cpp
index 3ad5060da..296bd1337 100644
--- a/Core/HLE/sceDisplay.cpp
+++ b/Core/HLE/sceDisplay.cpp
@@ -818,6 +818,12 @@ u32 sceDisplaySetFramebuf(u32 topaddr, int linesize, int pixelformat, int sync)
 	hleEatCycles(290);
 
 	s64 delayCycles = 0;
+
+	int MaxFPS = g_Config.iForceMaxEmulatedFPS;
+		if (topaddr != 0 && topaddr != framebuf.topaddr && framebuf.topaddr != 0 && MaxFPS > 0) {
+		MaxFPS = 60;
+	}
+
 	// Don't count transitions between display off and display on.
 	if (topaddr != 0 &&
 		(topaddr != framebuf.topaddr || PSP_CoreParameter().compat.flags().SplitFramebufferMargin) &&
@@ -846,7 +852,7 @@ u32 sceDisplaySetFramebuf(u32 topaddr, int linesize, int pixelformat, int sync)
 		}
 
 		// 1001 to account for NTSC timing (59.94 fps.)
-		u64 expected = msToCycles(1001) / framerate - LEEWAY_CYCLES_PER_FLIP;
+		u64 expected = msToCycles(1001) / MaxFPS - LEEWAY_CYCLES_PER_FLIP;
 		lastFlipCycles = now;
 		nextFlipCycles = std::max(lastFlipCycles, nextFlipCycles) + expected;
 	}
diff --git a/UI/GameSettingsScreen.cpp b/UI/GameSettingsScreen.cpp
index 23d360c28..6b8185f8c 100644
--- a/UI/GameSettingsScreen.cpp
+++ b/UI/GameSettingsScreen.cpp
@@ -200,6 +200,8 @@ void GameSettingsScreen::CreateViews() {
 		g_Config.loadGameConfig(gameID_, info->GetTitle());
 	}
 
+	maxFpsChoice = (g_Config.iForceMaxEmulatedFPS / 10);
+
 	iAlternateSpeedPercent1_ = g_Config.iFpsLimit1 < 0 ? -1 : (g_Config.iFpsLimit1 * 100) / 60;
 	iAlternateSpeedPercent2_ = g_Config.iFpsLimit2 < 0 ? -1 : (g_Config.iFpsLimit2 * 100) / 60;
 	iAlternateSpeedPercentAnalog_ = (g_Config.iAnalogFpsLimit * 100) / 60;
@@ -411,6 +413,10 @@ void GameSettingsScreen::CreateGraphicsSettings(UI::ViewGroup *graphicsSettings)
 	frameSkipAuto_ = graphicsSettings->Add(new CheckBox(&g_Config.bAutoFrameSkip, gr->T("Auto FrameSkip")));
 	frameSkipAuto_->OnClick.Handle(this, &GameSettingsScreen::OnAutoFrameskip);
 
+	static const char *maxFps[] = {"Auto", "10", "20", "30", "40", "50", "60", "70", "80"};
+	maxFps_ = graphicsSettings->Add(new PopupMultiChoice(&maxFpsChoice, gr->T("Force Max FPS (lower helps GoW)"), maxFps, 0, ARRAY_SIZE(maxFps), gr->GetName(), screenManager()));
+	maxFps_->OnChoice.Handle(this, &GameSettingsScreen::OnForceMaxEmulatedFPS);
+
 	PopupSliderChoice *altSpeed1 = graphicsSettings->Add(new PopupSliderChoice(&iAlternateSpeedPercent1_, 0, 1000, NO_DEFAULT_INT, gr->T("Alternative Speed", "Alternative speed"), 5, screenManager(), gr->T("%, 0:unlimited")));
 	altSpeed1->SetFormat("%i%%");
 	altSpeed1->SetZeroLabel(gr->T("Unlimited"));
@@ -1324,6 +1330,16 @@ UI::EventReturn GameSettingsScreen::OnFullscreenMultiChange(UI::EventParams &e)
 	return UI::EVENT_DONE;
 }
 
+UI::EventReturn GameSettingsScreen::OnForceMaxEmulatedFPS(UI::EventParams &e) {
+	if (maxFpsChoice > 0) {
+		g_Config.iForceMaxEmulatedFPS = (maxFpsChoice * 10);
+	} else {
+		g_Config.iForceMaxEmulatedFPS = 0;
+	}
+	Reporting::UpdateConfig();
+	return UI::EVENT_DONE;
+}
+
 UI::EventReturn GameSettingsScreen::OnResolutionChange(UI::EventParams &e) {
 	Reporting::UpdateConfig();
 	NativeMessageReceived("gpu_renderResized", "");
diff --git a/UI/GameSettingsScreen.h b/UI/GameSettingsScreen.h
index 89f1ce23a..af4b5b350 100644
--- a/UI/GameSettingsScreen.h
+++ b/UI/GameSettingsScreen.h
@@ -65,6 +65,7 @@ class GameSettingsScreen : public UIDialogScreenWithGameBackground {
 	UI::Choice *displayEditor_ = nullptr;
 	UI::Choice *backgroundChoice_ = nullptr;
 	UI::PopupMultiChoice *resolutionChoice_ = nullptr;
+    UI::PopupMultiChoice *maxFps_ = nullptr;
 	UI::CheckBox *frameSkipAuto_ = nullptr;
 	SettingInfoMessage *settingInfo_ = nullptr;
 	UI::Choice *clearSearchChoice_ = nullptr;
@@ -108,6 +109,7 @@ class GameSettingsScreen : public UIDialogScreenWithGameBackground {
 	UI::EventReturn OnFullscreenChange(UI::EventParams &e);
 	UI::EventReturn OnFullscreenMultiChange(UI::EventParams &e);
 	UI::EventReturn OnResolutionChange(UI::EventParams &e);
+    UI::EventReturn OnForceMaxEmulatedFPS(UI::EventParams &e);
 	UI::EventReturn OnRestoreDefaultSettings(UI::EventParams &e);
 	UI::EventReturn OnRenderingMode(UI::EventParams &e);
 	UI::EventReturn OnRenderingBackend(UI::EventParams &e);
@@ -134,6 +136,7 @@ class GameSettingsScreen : public UIDialogScreenWithGameBackground {
 	UI::EventReturn OnClearSearchFilter(UI::EventParams &e);
 
 	// Temporaries to convert setting types, cache enabled, etc.
+    int maxFpsChoice
 	int iAlternateSpeedPercent1_ = 0;
 	int iAlternateSpeedPercent2_ = 0;
 	int iAlternateSpeedPercentAnalog_ = 0;
diff --git a/libretro/libretro.cpp b/libretro/libretro.cpp
index e60c07370..2c473adb0 100644
--- a/libretro/libretro.cpp
+++ b/libretro/libretro.cpp
@@ -649,6 +649,29 @@ static void check_variables(CoreParameter &coreParam)
          g_Config.iFrameSkipType = 1;
    }
 
+   var.key = "ppsspp_force_max_fps";
+   if (environ_cb(RETRO_ENVIRONMENT_GET_VARIABLE, &var) && var.value)
+   {
+      if (!strcmp(var.value, "Auto"))
+         g_Config.iForceMaxFPS = 0;
+      else if (!strcmp(var.value, "10"))
+         g_Config.iForceMaxFPS = 10;
+      else if (!strcmp(var.value, "20"))
+         g_Config.iForceMaxFPS = 20;
+      else if (!strcmp(var.value, "30"))
+         g_Config.iForceMaxFPS = 30;
+      else if (!strcmp(var.value, "40"))
+         g_Config.iForceMaxFPS = 40;
+      else if (!strcmp(var.value, "50"))
+         g_Config.iForceMaxFPS = 50;
+      else if (!strcmp(var.value, "60"))
+         g_Config.iForceMaxFPS = 60;
+      else if (!strcmp(var.value, "70"))
+         g_Config.iForceMaxFPS = 70;
+      else if (!strcmp(var.value, "80"))
+         g_Config.iForceMaxFPS = 80;
+   }
+
    var.key = "ppsspp_auto_frameskip";
    if (environ_cb(RETRO_ENVIRONMENT_GET_VARIABLE, &var) && var.value)
    {
